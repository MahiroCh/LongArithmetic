#include <iostream>
#include <chrono>
#include "funcsHeader.hpp"
using namespace LongArithm;

#define TEST_CASE(name, expr) \
    if (expr) std::cout  << name << " [ OK ] " << std::endl; \
    else std::cout << name << " [FAIL] " << std::endl;

int main() {
    
    DA_BIG a, b;

    a = DA_BIG{"0.0354628376451547623546797645"};
    b = DA_BIG{"-4352143512435124.9187346519783459"};
    TEST_CASE("Test 1: ", (a + b).toDecimalStr(28) == "-4352143512435124.8832718143331911376453202355");

    a = DA_BIG{"99999999.9999999499997"};
    b = DA_BIG{"100000000000.0000000500003"};
    TEST_CASE("Test 2: ", (a + b).toDecimalStr() == "100100000000");
    
    a = DA_BIG{"87651476164587162354786125347651768324517862354871625476152.00002398471283547198237518236451235761724365712365716237456721364571675618265"};
    b = DA_BIG{"1235419253478126345875123087561276348701235087123640871.7256728645716571345617654198764578165987436587131345643"};
    TEST_CASE("Test 3: ", (a + b).toDecimalStr(77) == "87652711583840640481132000470739329600866563589958749117023.72569684928449260654414060224097017421598731583679172667456721364571675618265");
    
    a = DA_BIG{"0.000000000056"};
    b = DA_BIG{"-124357542.7623546235"};
    TEST_CASE("Test 4: ", (a * b).toDecimalStr(21) == "-0.006964022394691858916");
    
    a = DA_BIG{"-870630958763980576890276284567827659287659082743985679.123451234785167234517623547816253478612354765123764512763547125347152387451276345", 1000};
    b = DA_BIG{"-71326454635217861254761275641276457691345761324576325476154761348734876513476.1526345128734571625697135913487216374565129873456182736598172365987126359129765179645613", 1000};
    TEST_CASE("Test 5: ", (a * b).toDecimalStr(169) == "62099019584295293042695754023804655638699591425569695296505621612666510332288350425792387979778598562166956659517462372219844634896.3641474229121275298690659338533775434027684320278468014413173672886912920359840822247311610578235957807882657174223812864902842268615816574562250277321178006971629924485");
    
    a = DA_BIG{"1.00000002100000304000002156400005300042"};
    b = DA_BIG{"-0.00000000000000236452763546125461812547815247651287465127863"};
    TEST_CASE("Test 6: ", (a * b).toDecimalStr(97) == "-0.0000000000000023645276851163421509758879239996495855639988374753577633654462593948692451209270246");
    
    a = DA_BIG{"0.0012374612786347"};
    b = DA_BIG{"12341234123.873645127634"};
    TEST_CASE("Test 7: ", (a / b).toDecimalStr(101) == "0.00000000000010027046454299724471780954808627925946764397963753168257727711662488294237978671547679395");
    
    a = DA_BIG{"-100", 1000};
    b = DA_BIG{"-0.00000000001", 1000};
    TEST_CASE("Test 8: ", (a / b).toDecimalStr() == "10000000000000");
    
    a = DA_BIG{"34657834657.123414343"};
    b = DA_BIG{"-64657834657.123414343"};
    TEST_CASE("Test 9: ", (a >= b) == 1);
    
    a = DA_BIG{"-34657834657.123414343"};
    b = DA_BIG{"-34657834657.12341434367"};
    TEST_CASE("Test 10: ", (a >= b) == 1);
    
    a = DA_BIG{"34657834657.123414343"};
    b = DA_BIG{"-64657834657.123414343"};
    TEST_CASE("Test 11: ", (a < b) == 0);

    a = 100.5_longnum;
    b = 10.24_longnum;
    TEST_CASE("Test 12: ", (a * b).toDecimalStr() == "1029.12");

    a = DA_BIG{"0.1101010111100000111", 1000, false};
    a.setBinPrecision(17);
    TEST_CASE("Test 13: ", a.toDecimalStr(1000, true) == "0.1101010111100001");
    a.setBinPrecision(34);
    TEST_CASE("Test 13.1: ", a.toDecimalStr(1000, true) == "0.1101010111100001");

    auto begin = std::chrono::steady_clock::now();
    TEST_CASE("Test 14: ", DA_BIG::getPi() == "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679");
    auto end = std::chrono::steady_clock::now();
    auto elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin);
    std::cout << "  The time elapsed on Test 14: " << elapsed_ms.count() << " ms\n";

    begin = std::chrono::steady_clock::now();
    TEST_CASE("Test 15: ", DA_BIG::getPi(200, 700) == "3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196");
    end = std::chrono::steady_clock::now();
    elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin);
    std::cout << "  The time elapsed on Test 15: " << elapsed_ms.count() << " ms\n";

    return 0;
}
